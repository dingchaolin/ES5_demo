<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Untitled Document</title>
		<script type=text/javascript charset=utf-8>
			//js中怎么去实现继承：采用原型链的概念
			//构造函数  原型对象 实例对象
			//1 构造函数.prototype = 原型对象
			//2 原型对象.constructor = 构造函数（模板）
			//3 原型对象.isPrototypeOf(实例对象); 判断实例对象的原型是不是当前对象
			//4 构造函数 实例对象 类和实例的关系
			
			//父类
			function Sup(name){
				this.name = name;//实例对象的属性 模板
			}
			
			//父类的原型对象
			Sup.prototype = {//原型对象的属性
				constructor:Sup,
				sayName:function(){ alert(this.name);}
			};
			//子类构造函数 sub
			function Sub( age ){
				this.age = age;
			}
			//如果我们让子类的原型对象等于父类的实例 结果会怎么样呢？ 实现了Js的继承
			//1 显然 此时的原型对象包含指向另一个原型的指针
			//Sup的实例对象 和 sup的原型对象 有一个关系
			//2 相应的另一个原型对象中包含着指向另一个构造函数的指针
			//子类的原型对此昂的构造器变成了父类的构造器了
			Sub.prototype = new Sup( 'z3');
			//alert( Sub.prototype.constructor );//子类的构造函数模板
		
		   var sub1 = new Sub();
		   sub1.sayName();
		   alert( sub1.name );
		
		</script>
	</head>
	<body>
	</body>
</html>
