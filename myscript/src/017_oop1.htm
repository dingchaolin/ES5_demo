<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Untitled Document</title>
		<script type=text/javascript charset=utf-8>
			var obj = new Object();
			obj.name = 'z3';
			obj.age = 'man';
			obj.sayName = function(){ 
			alert('i am z3');
			}
			//类的概念
			
			//第一种形式  工场模型
			
			/*
			function createPerson( name, sex, age ){
				var obj =  new Object();
				obj.name = name;
				obj.sex = sex;
				obj.age = age;
		        obj.sayName = function(){
					alert( this.name );
				}
				return obj;
			}
			
			var p1 = createPerson( 'z3','man', 20);
			var p2 = createPerson( 'z4', 'woman', 30 );
			alert( p1.sex );
			p2.sayName();
			*/
			//第二种形式 构造函数式  new Array new Date  最常采用这种方式
			//函数的第一个字母大写 类的模板
			function Person( name, age, sex ){
				this.name = name;
				this.age = age;
				this.sex = sex;
				this.sayName = function(){
					alert( this.name );
				}
			}
			//构造一个对象  使用new关键字  传递参数 执行模板代码 返回对象
			/*
			var p1 = new Person( 'xiao1', 20, 'man' ); //这样做 相当于 把this的指针赋值给了p1
			var p2 = new Person( 'xaio2', 34, 'woman');
			//alert( p1.sex );
			//p1.sayName();
			//alert( p1==p2);// 类的概念 根据模板创建出不同的实例对象
			
			//alert(p1.constructor == Person);
			//alert(p2.constructor == Person);
			
			alert( p1 instanceof Person );
			alert( p1 instanceof Object );
			*/
			
			//创建对象的方式
			// 1 当做构造函数去使用
			var p1 = new Person('xiao1', 20, 'man' );
			//2 作为普通的函数去调用
			Person( 'xiao2', 24, 'man' );//在全局环境定义属性并复制 直接定义在window上了
			//alert( name );//window多了一些属性  name就是其中一个
			//3 在另一对象的作用域中调用
			var o = new Object();
			Person.call( o, 'xiao3', 12, 'woman' );
			alert( o.name);
			o.sayName();
			
			
		</script>
	</head>
	<body>
	</body>
</html>
