<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Untitled Document</title>
		<script type=text/javascript charset=utf-8 src=../commons/CommonUtil.js></script>
		<script type=text/javascript charset=utf-8>
			
			/**
			 * 组合模式应用的场景和特点：
			 * 场景：
			 * 1 存在一批组织成某种组织层次体系的对象
			 * 2 希望对这批对象或其中一部分对象实施一个操作
			 * 
			 * 应用特点：
			 * 1,   2种对象：组合对象 叶子对象
			 * 2，   2种类型都实现同一批接口
			 * 3，   一般我们会在组合对象中调用其方法并隐式调用“下级对象”的方法 这里我们一般采用递归的形式去做
			 * 
			 */
			
			
			
			/*
			 * 场景模拟:
			 * -> 公司  ->北京分公司
			 *         ->南京分公司
			 *        					 -> 财务部门
			 *                    					 	->张一
			 *                     						->张二
			 *                     						->张三
			 *        					->销售部门
			 *                    						->张四
			 *                    						->张五
			 *                    						->张六
			 *                
			 *    实际的任务具体是落实到人上去实施的  也就是说只有人才有具体的方法实现
			 *                    
			 *                    
			 */
			
			
			
			
			var  CompositeInterface = new BH.Interface('CompositeInterface',['addChild','getChild']);
			var  LeafInterface = new BH.Interface('LeafInterface',['hardworking','sleeping']);
			
			var Composite = function(name){
				this.name = name;
				this.type = 'Composite';//说明对象的类型  组合对象
			    this.children = [];//存放孩子的数组
			};
			var Leaf = function(name){
				this.name = name;				
				this.type = 'leaf';
			};
			
			Composite.prototype = {
				constructor:Composite,
				addChild:function( child ){
					this.children.push( child );
					return this;
					
				},
				getChild:function( name ){
					//接受leaf类型的数组
					
					var elements = [];
					//判断对象是否为leaf类型的 如果是 直接加到elements数组中  不是 继续递归调用
					var pushLeaf = function( item ){
						if( item.type === 'Composite'){
								item.children.each( arguments.callee );//递归调用
							}
							else if( item.type === 'leaf'){
								elements.push(item);
							}
					}
					
					if( name && this.name !== name ){//根据name 指定name下的所有的类型为leaf的对象去执行操作
						this.children.each( function( item ){//是从总节点开始循环的
							//如果传递的name是二级节点
							if( item.name === name &&  item.type === 'Composite'){
								item.children.each( pushLeaf );
							}
							//如果传递的name是3级节点 或者更深层次的节点
							if( item.name !== name && item.type === 'Composite'){
								item.children.each( arguments.callee );
							}
							if( item.name === name && item.type === 'leaf'){
								elements.push( item );
							}
						} );
					}else {//不传递name 让整个公司类型为leaf的对象去执行操作
						this.children.each( pushLeaf );
					}
					return elements;
				},
				hardworking:function( name ){
					//得到所有的Leaf类型的对象   数组
					var leafObject = this.getChild( name );
					for( var i = 0; i < leafObject.length; i++){
						leafObject[i].hardworking();
					}
				},
				sleeping:function( name ){
					//得到所有的Leaf类型的对象
					var leafObject = this.getChild( name );
					for( var i = 0; i < leafObject.length; i++){
						leafObject[i].sleeping();
					}
				}
				
			};
			Leaf.prototype = {
				constructor:Leaf,
				addChild:function( child ){
				 throw new Error('this method os disable....');
				},
				getChild:function( name ){
					if( this.name = name ){
						return this;
					}
					return null;
				},
				hardworking:function(  ){
					document.write(this.name + '努力工作！     ');
				},
				sleeping:function(  ){
					document.write(this.name + '...努力睡觉！');
				}
			}
			
			var p1 = new Leaf('张1');
			var p2 = new Leaf('张2');
			var p3 = new Leaf('张3');
			var p4 = new Leaf('张4');
			var p5 = new Leaf('张5');
			var p6 = new Leaf('张6');
			
			var p7 = new Leaf('张7');
			var p8 = new Leaf('张8');
			var p9 = new Leaf('张9');
			var p10 = new Leaf('张10');
			var p11 = new Leaf('张11');
			var p12 = new Leaf('张12');
			
			
			var dept1 = new Composite('北京开发部门');
			dept1.addChild(p1).addChild(p2).addChild(p3);
			var dept2 = new Composite('北京销售部门');
			dept2.addChild(p4).addChild(p5).addChild(p6);
			
			var dept3 = new Composite('南京开发部门');
			dept3.addChild(p7).addChild(p8).addChild(p9);
			var dept4 = new Composite('南京销售部门');
			dept4.addChild(p10).addChild(p11).addChild(p12);
			
			var org1 = new Composite('北京Skyvio');
			org1.addChild( dept1 ).addChild( dept2 );
			
			var org2 = new Composite('南京Skyvio');
			org2.addChild( dept3 ).addChild( dept4 );
			
			var org = new Composite('Skyvio');
			org.addChild( org1 ).addChild( org2 );
			
			org.hardworking();//Skyvio
			document.write('<Br>-----------------------------------<Br>');
			//总公司的直接子节点
			org.hardworking('南京Skyvio');//Skyvio
			document.write('<Br>-----------------------------------<Br>');
			//name为总公司的间接子节点 类型不为leaf
			org.hardworking('北京销售部门');//Skyvio
			document.write('<Br>-----------------------------------<Br>');
			//name为leaf对象的时候
			org.hardworking('张7');//Skyvio
			document.write('<Br>-----------------------------------<Br>');
			
			
		</script>
	</head>
	<body>
	</body>
</html>
