<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Untitled Document</title>
		<!--引入的核心的js文件-->
		<script type=text/javascript charset=utf-8 src=../commons/CommonUtil.js></script>
		<script type=text/javascript charset=utf-8>
			
			
			
			// 细粒度（更精确）  粗粒度(大概) 
			
			// 万事万物皆对象  
			// 买什么车？去什么商店-》商店->卖车->生产车->Factory
			
			//搭建一个工厂的环境
			//卖车的商店可能有  奥迪4s店  奔驰4s店  宝马4s店
			
			//Super Shop  卖车
			//anstract class  == 抽象类  抽象类不能被实例化 
			/*
			 * this CarShop is a abstract
			 */
			function CarShop(){};
			CarShop.prototype ={
				constructor: CarShop,
				sellCar:function(type){
					//......销售人员
					//var car = CarFactory.createCar( type );
					// 保险 相关的售后服务
					//return car;
					
					
					this.abstractSellCar(type);
				},
				abstractSellCar:function(){
					throw new Error('this method is abstract......');//抽象方法  在子类中调用 在抽象类中并没有实现
				}
			};
			
			//Benz 4s店
			function BenzCarShop(){};
			BH.extend( BenzCarShop, CarShop );
			/*
		    BenzCarShop.prototype = {
				constructor:BenzCarShop,
				sellCar:function(type){
					var car;//声明一个变量
					var types = ['Benz'];//所有Benz类型的汽车
					for( t in types){
						//如果我的商店里有你想要的汽车型号
						if( types[t] === type ){
							car = CarFactory.createCar( type );
						}
						else{
						    alert('没有你想要的型号');
						}
					}
					return car;
					//var car = CarFactory.createCar( type );
					//return car;
				}
			};*/
			//修改为一下代码：
			//##################################################
			BenzCarShop.prototype.sellCar = function(type){
					var car;//声明一个变量
					var types = ['Benz'];//所有Benz类型的汽车
					for( t in types){
						//如果我的商店里有你想要的汽车型号
						if( types[t] === type ){
							car = CarFactory.createCar( type );
						}
						else{
						    alert('没有你想要的型号');
						}
					}
					return car;
					//var car = CarFactory.createCar( type );
					//return car;
				}
			//##################################################
			//宝马 4s 店
			function BmwCarShop(){};
			BH.extend( BmwCarShop, CarShop );
			BmwCarShop.prototype = {
				constructor:BmwCarShop,
				sellCar:function(type){
					var car;//声明一个变量
					var types = ['Benz'];//所有bmw类型的汽车
					for( t in types){
						//如果我的商店里有你想要的汽车型号
						if( types[t] === type ){
							car = CarFactory.createCar( type );
						}
						else{
						    alert('没有你想要的型号');
						}
					}
					return car;
					//var car = CarFactory.createCar( type );
					//return car;
				}
			
			};
			//生产车的工厂  目的就是为了生产车
			//单体模式  不可以new 
			//动态工厂模式
			var CarFactory = {
				createCar: function(type){
					//利用eval动态创建传入实例类型的实例对象
					//var car = new Benz();
					var car = eval('new ' + type + '()' );//eval 动态执行一个字符串
					
					//检验接口实现
					BH.Interface.ensureImplements(car, CarInterface);
					return car;
				}
					
			};
			
			
			
			
			
			//class  benz  bmw  audi(都是车)
			var CarInterface = new BH.Interface('CarInterface',['start','run']);
			
			//SuperClass  超类
			// SuperClass implements 
			//函数内部调用本身 使用callee  arguments.callee() 相当于调用函数本身
			function BaseCar(){};
			BaseCar.prototype = {
				constructor:BaseCar,
				start:function(){
					alert( this.constructor.name + 'start');
				},
				run:function(){
					alert(this.constructor.name +'run');
				}
			};
			
			
			//子类一定要先继承父类  子类再去扩展子类特有的方法
			function Benz(){};
			BH.extend( Benz, BaseCar );//原型对象继承 //一定要先继承  1
			Benz.prototype.driveBenz = function(){alert('driveBenz');}//再扩展方法   2  如果1,2顺序颠倒 就找不到扩展的方法了
	        //Benz.prototype.run = function(){alert('Benz.run');}
			
			function Bmw(){};
			BH.extend( Bmw, BaseCar );
			Bmw.prototype.driveBmw = function(){alert('driveBmw');}
			//Bmw.prototype.run = function(){alert('Bmw.run');}
			
			function Audi(){};
			BH.extend( Audi, BaseCar );
			Audi.prototype.driveAudi = function(){alert('driveAudi');}
			//Audi.prototype.run = function(){alert('Audi.run');}
			
			/*
			var shop = new CarShop();
			var car = shop.sellCar('Bmw');
			car.start();
			car.run();
			car.driveBmw();
			*/
			
			var shop1 = new BenzCarShop();
			var car1 = shop1.sellCar('Benz');
			//alert(shop1.constructor );
			car1.run();
		</script>
	</head>
	<body>
	</body>
</html>
